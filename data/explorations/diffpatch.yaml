parameters: []
states:
- content:
  - type: text
    value: "<div><h1>Using diff and patch</h1><h3>The set-up</h3><p>Through this training mission, imagine you are a big fan of pancakes. Recently, you published a book with all your best recipes.</p><p>The book has taken the global pancake community by storm, and many of your adoring fans are creating and sharing modifications to your recipes through 'patch' files.</p><p>In this training mission, by playing different roles, you will learn how to create and apply patches via the diff and patch command-line tools</p><h3>Context in open source</h3><p>For many open source development communities, patches are the basis of how contributors describe and share changes. Projects small and large often ask users to 'submit a patch' with new features or bugfixes. For example, for decades, the Linux kernel project has asked contributors to send patch files to the main project mailing list for discussion and integration into the main project.</p><p>This mission consists of four parts: diffing individual files, patching individual files, diffing entire directory hierarchies, and patching entire directory hierarchies.</p></div>"
  name: Welcome!
  param_changes: []
  widget:
    handlers:
    - name: submit
      rule_specs:
      - dest: Patch!
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    params: {}
    sticky: false
    widget_id: Continue
- content:
  - type: text
    value: "<div><h1>Patching individual files</h1><p>Critics love your recipes:</p><quote>The audacity of the author's 'oven pancake' is exceeded only by its simplicity, which is further exceeded by its tastiness.</quote>â€” Pancake Digest Weekly<p>An enthusiastic fan noticed, however, that you forgot to add the temperature for the oven! Luckily, she sent you a patch with a fix.</p><p>Your task is to download a copy of your original recipe, download the contributed patch file, and use the patch command to combine the two. Once you have done that, submit the resulting improved recipe into the form below.</p><p>Essential links:</p><ul><li><a href='http://openhatch.org/missions/diffpatch/patchsingle/oven-pancake.txt'>Your original recipe</a></li><li><a href='http://openhatch.org/missions/diffpatch/patchsingle/add-oven-temp.patch'>Patch file adding the oven temperature</a></li></ul><p>After you patch the file, upload it here:</p></div>"
  name: Patch!
  param_changes: []
  widget:
    handlers:
    - name: submit
      rule_specs:
      - dest: Diff!
        feedback:
        - Yes! You got it right.
        inputs:
          x: 'oven-pancake.txt'
        name: FileMatches
        param_changes: []
      - dest: Patch!
        feedback:
        - Oops. Something was wrong.
        inputs: {}
        name: Default
        param_changes: []
    params: {}
    sticky: false
    widget_id: FileReadInput
- content:
  - type: text
    value: "<div><h1>Diffing individual files</h1><p>As a popular cookbook author, you often receive requests for modified recipes. You're a generous person, so you're happy to help by providing patches with the changes they asked for.</p><p>One enthusiastic reader wrote in with this question:</p><blockquote><p>Dear Cook,</p><p>Thanks to your cookbook, I've been delighting everyone with tasty pancakes. People go bananas when I make the nutty pancake recipe!</p><p>The one problem is that I'm allergic to almonds, so I can't eat the tasty things. Is there some other way to get the nuttiness that everyone loves?</p></blockquote><p>Nutty as it sounds, the answer is walnuts. Your mission is to:</p><ul><li><a href='http://openhatch.org/missions/diffpatch/diffsingle/nutty-pancake.txt'>Download the original recipe</a> to your computer.</li><li>On your own computer, make a copy of the recipe, and open that copy in a text editor.</li><li>Replace 'almond' with 'walnut'. You should expect to find 'almond' twice in the original recipe.</li><li>Invoke the diff program to summarize the changes you made, creating a 'unified diff' (the universally preferred flavor of diff output). Paste that diff into the box below! (See Hints for help.)</li></ul><h3>Context in open source</h3><p>When you are submitting changes to a project, you will often need to run diff to create a patch that you can submit. Large patches can be stored in files and attached to whatever medium you use to submit the patch; for short patches, contributors often paste them into email messages or bug reports. So instead of uploading the patch in a file, your mission will be to make your patch and copy and paste it into the box below.</p><p>Paste the unified diff here: </p></div>"
  name: Pack!
  param_changes: []
  widget:
    handlers:
    - name: submit
      rule_specs:
      - dest: END
        feedback:
        - Yes! You got it right.
        inputs:
          x: 'myproject-0.1.tar.gz'
        name: FileMatches
        param_changes: []
      - dest: Diff!
        feedback:
        - Oops. Something was wrong.
        inputs: {}
        name: Default
        param_changes: []
    params: {}
    sticky: false
    widget_id: FileReadInput